// (New Power Measurement equation solution)
#include <Arduino.h>
#include <SensirionI2CSen5x.h>
#include <Wire.h>
#include <ADSWeather.h>
#include <HTTPClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include "SHTSensor.h"
#include "INA226.h"
#include "RTClib.h"
#include <ModbusMaster.h>

#define HSPI_MISO   32
#define HSPI_MOSI   13
#define HSPI_SCLK   14
#define HSPI_SS     25



SPIClass hspi = SPIClass(HSPI);


// Your GPRS credentials (leave empty, if not needed)
const char apn[]      = "Internet"; // APN (example: internet.vodafone.pt) use https://wiki.apnchanger.org
const char gprsUser[] = ""; // GPRS User
const char gprsPass[] = ""; // GPRS Password

// SIM card PIN (leave empty, if not defined)
const char simPIN[]   = ""; 

// Server details
// The server variable can be just a domain name or it can have a subdomain. It depends on the service you are using
const char server[] = "solar.arelashesi.com"; // domain name: example.com, maker.ifttt.com, etc
const char resource[] = "/insertData2Cloud.php";         // resource path, for example: /post-data.php
const int  port = 80;                             // server port number

// Keep this API Key value to be compatible with the PHP code provided in the project page. 
// If you change the apiKeyValue value, the PHP file /post-data.php also needs to have the same key 
String apiKeyValue = "tPmAT5Ab3j7F9";

// TTGO T-Call pins
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23
#define MODEM_TX             27
#define MODEM_RX             26

// Relay Tick Counter
enum RelayStates {ON, OFF};
int relayTickCounter = 0;

enum RelayStates controlPrevRelayState = OFF;
enum RelayStates testPrevRelayState = OFF;
enum RelayStates controlRelayState = OFF;
enum RelayStates testRelayState = OFF;

// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1

// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#define TINY_GSM_RX_BUFFER   1024  // Set RX buffer to 1Kb

// Define the serial console for debug prints, if needed
//#define DUMP_AT_COMMANDS

#include <TinyGsmClient.h>

#ifdef DUMP_AT_COMMANDS
  #include <StreamDebugger.h>
  StreamDebugger debugger(SerialAT, Serial);
  TinyGsm modem(debugger);
#else
  TinyGsm modem(SerialAT);
#endif


// TinyGSM Client for Internet connection
TinyGsmClient client(modem);



// LEDs
#define GREENLED 27
#define BLUELED 26
volatile int greenState = 0;



////............Relay Module...............///
int controlPanelRelayPin = 18;
int testPanelRelayPin = 19;


////............DS18B20...............///

// Data wire is plugged TO GPIO 4
#define ONE_WIRE_BUS 33
#define TEMPERATURE_PRECISION 12

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

// Number of temperature devices found
int numberOfDevices;

// We'll use this variable to store a found device address
DeviceAddress tempDeviceAddress;

// arrays to hold device addresses
DeviceAddress testPanelThermometer, controlPanelThermometer;

float temperatureValues[] = {0, 0, 0, 0, 0};

float testPanelTemperature = 0.0;
float controlPanelTemperature = 0.0;



////............WiFi Credentials...............//
//Replace with your network credentials
//const char* ssid     = "Air";
//const char* password = "8T06m98^";
const char* ssid     = "ARELAir";
const char* password = "WKHKYD?2023";

const String URL = "http://www.solar.arelashesi.com/insertData2Cloud.php?";


String userID = "0";
String deviceID = "xxv233";
float massOfDustOnPanel = 0.0;
float irradiance = 0.0;

bool GSMConnectionStatus = false;
String localData = "";
bool localDataAvailable = false;



/// -------- RTC Module ----------///
RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

String localDateTime = "";
String timeHour = "";
int timeHourInt = 0;
int timeMinInt = 0;

String timeMinute = "";
String timeSecond = "";
String dateYear = "";
String dateMonth = "";
String dateDay = "";
String dateSend = "";
String timeSend = "";

////..........SD Card............//
// Timer variables
String dataMessage;
unsigned long epochTime = 0;



////..........SHT35............//

SHTSensor sht;
float shtHumidity = 0;
float shtTemperature = 0;
// To use a specific sensor instead of probing the bus use this command:
// SHTSensor sht(SHTSensor::SHT3X);



////..........INA226............//


float inachargeControlCurrentControl = 0.0;//Off
float inachargeControlCurrentTest = 0.0;//Off

float inachargeControlVoltageControl = 0.0;//Off
float inachargeControlVoltageTest = 0.0;//Off

float inachargeControlPowerControl = 0.0;//Off
float inachargeControlPowerTest = 0.0;//Off


float panelPowerControl = 0;
float panelPowerTest = 0;

float panelCurrentControl = 0;
float panelCurrentTest = 0;

float inapanelVoltageControl = 0;//Off
float inapanelVoltageTest = 0;//Off

float efficiencyControl = 0;
float efficiencyTest = 0;

INA226 controlPanel(0x40);
INA226 controlChargeController(0x41);
INA226 testPanel(0x43);
INA226 testChargeController(0x45);


////-----Modbus Charge Controller Power read--------////


// Modbus Instance
ModbusMaster node;

// RS485 Communication Pins
#define RS485_RX_SLAVE_1 15 // RX pin for Slave 1
#define RS485_TX_SLAVE_1 2  // TX pin for Slave 1
#define RS485_RX_SLAVE_2 2  // RX pin for Slave 2
#define RS485_TX_SLAVE_2 15 // TX pin for Slave 2

// Define the HardwareSerial port (e.g., Serial2 for ESP32)
HardwareSerial RS485(2); // Use UART2 for RS485 communication

// Known Register Addresses
#define BATTERY_CHARGE_PERCENT 0x101
#define BATTERY_VOLTAGE 0x102
#define CHARGING_CURRENT 0x103
#define BATTERY_POWER 0x104
#define PANEL_VOLTAGE 0x109
#define LOAD_VOLTAGE 0x106
#define LOAD_CURRENT 0x107
#define LOAD_POWER 0x108

// Variables for Test and Control Data
float panelVoltageTest = 0;//In use
float chargeControlCurrentTest = 0;//In use
float chargeControlPowerTest = 0;//In use (Calculated)
float chargeControlVoltageTest = 0; //In use
float batteryChargePercentTest = 0;//In use
float batteryPowerTest = 0;// Pre-calculated value
float loadVoltageTest = 0;
float loadCurrentTest = 0;
float loadPowerTest = 0;
float calcIndexTest = 0;
float instIndexTest = 0;

float panelVoltageControl = 0;//In use
float chargeControlCurrentControl = 0;//In use
float chargeControlPowerControl = 0;//In use (Calculated)
float chargeControlVoltageControl = 0;//In use
float batteryChargePercentControl = 0;//In use
float batteryPowerControl = 0;// Pre-calculated value
float loadVoltageControl = 0;
float loadCurrentControl = 0;
float loadPowerControl = 0;
float calcIndexControl =0;
float instIndexControl = 0;

////.............PM Sensor................////

// The used commands use up to 48 bytes. On some Arduino's the default buffer
// space is not large enough
#define MAXBUF_REQUIREMENT 48

#if (defined(I2C_BUFFER_LENGTH) &&                 \
     (I2C_BUFFER_LENGTH >= MAXBUF_REQUIREMENT)) || \
    (defined(BUFFER_LENGTH) && BUFFER_LENGTH >= MAXBUF_REQUIREMENT)
#define USE_PRODUCT_INFO
#endif

SensirionI2CSen5x sen5x;

float massConcentrationPm1p0;
float massConcentrationPm2p5;
float massConcentrationPm4p0;
float massConcentrationPm10p0;
float ambientHumidity;
float ambientTemperature;
float vocIndex;
float noxIndex;


// SHTSensor sht(SHTSensor::SHT3X);


////..........Weather Station........//

#define ANEMOMETER_PIN 34
#define VANE_PIN 36
#define RAIN_PIN 35

#define CALC_INTERVAL 1000

unsigned long nextCalc;
unsigned long timer;


float rainAmount;
long windDirection;
int windGust;
float windSpeedD;

ADSWeather ws1(RAIN_PIN, VANE_PIN, ANEMOMETER_PIN); //This should configure all pins correctly

/// -------- Preferences ----------///
// Preferences preferences;

float amountOfRainPref;
float dayOfLastPref;



///...........Deep Sleep..................//
//#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
//#define TIME_TO_SLEEP  10        /* Time ESP32 will go to sleep (in seconds) */

unsigned long previousRuntime = 0; 
unsigned long previousLocalDataRuntime = 0; 

unsigned long cpmill = 0;
unsigned long ccpmill = 0;
unsigned long tpmill = 0;
unsigned long ttpmill = 0;



void setup() {

    Serial.begin(9600);
    while (!Serial) {
        delay(100);
    }

    pinMode(BLUELED, OUTPUT);
    pinMode(GREENLED, OUTPUT);

    pinMode(controlPanelRelayPin, OUTPUT);
    pinMode(testPanelRelayPin, OUTPUT);
    
    digitalWrite(BLUELED, HIGH);
    digitalWrite(GREENLED, LOW);

    digitalWrite(controlPanelRelayPin, HIGH);
    digitalWrite(testPanelRelayPin, HIGH);

    Wire.begin();

    ///..........PM SENSOR.........////

    sen5x.begin(Wire);

    uint16_t error;
    char errorMessage[256];
    error = sen5x.deviceReset();
    if (error) {
        Serial.print("Error trying to execute deviceReset(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    }

    // Print SEN55 module information if i2c buffers are large enough
    #ifdef USE_PRODUCT_INFO
        printSerialNumber();
        printModuleVersions();
    #endif

    // set a temperature offset in degrees celsius
    // Note: supported by SEN54 and SEN55 sensors
    // By default, the temperature and humidity outputs from the sensor
    // are compensated for the modules self-heating. If the module is
    // designed into a device, the temperature compensation might need
    // to be adapted to incorporate the change in thermal coupling and
    // self-heating of other device components.
    //
    // A guide to achieve optimal performance, including references
    // to mechanical design-in examples can be found in the app note
    // “SEN5x – Temperature Compensation Instruction” at www.sensirion.com.
    // Please refer to those application notes for further information
    // on the advanced compensation settings used
    // in setTemperatureOffsetParameters, setWarmStartParameter and
    // setRhtAccelerationMode.
    //
    // Adjust tempOffset to account for additional temperature offsets
    // exceeding the SEN module's self heating.
    float tempOffset = 0.0;
    error = sen5x.setTemperatureOffsetSimple(tempOffset);
    if (error) {
        Serial.print("Error trying to execute setTemperatureOffsetSimple(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    } else {
        Serial.print("Temperature Offset set to ");
        Serial.print(tempOffset);
        Serial.println(" deg. Celsius (SEN54/SEN55 only");
    }

    // Start Measurement
    error = sen5x.startMeasurement();
    if (error) {
        Serial.print("Error trying to execute startMeasurement(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    }


    ////..........INA226............//
    // Initialize the INA226.
    if (!controlPanel.begin() )
    {
      Serial.println("controlPanel could not connect. Fix and Reboot");
    }
    if (!controlChargeController.begin() )
    {
      Serial.println("controlChargeController could not connect. Fix and Reboot");
    }
    if (!testPanel.begin() )
    {
      Serial.println("testPanel could not connect. Fix and Reboot");
    }
    if (!testChargeController.begin() )
    {
      Serial.println("testChargeController could not connect. Fix and Reboot");
    }
    controlPanel.setMaxCurrentShunt(1, 0.002);
    controlChargeController.setMaxCurrentShunt(1, 0.002);
    testPanel.setMaxCurrentShunt(1, 0.002);
    testChargeController.setMaxCurrentShunt(1, 0.002);


    ////..................ModBus......................////
    // Initialize RS485 Communication
  Serial.begin(9600); // Debug Serial Monitor

  // Initialize RS485 Communication with default pins (Slave 1)
  RS485.begin(9600, SERIAL_8N1, RS485_RX_SLAVE_1, RS485_TX_SLAVE_1); // Set baud rate and pins for Slave 1
  node.begin(1, RS485); // Initialize Modbus for Slave 1

  Serial.println("Setup complete. Starting data acquisition...");


    ///..........Weather Station Initialization..........//

    attachInterrupt(digitalPinToInterrupt(RAIN_PIN), ws1.countRain, FALLING); //ws1.countRain is the ISR for the rain gauge.
    attachInterrupt(digitalPinToInterrupt(ANEMOMETER_PIN), ws1.countAnemometer, FALLING); //ws1.countAnemometer is the ISR for the anemometer.
    nextCalc = millis() + CALC_INTERVAL;


    ///..........SHT35 Initialization..........//
    if (sht.init()) {
        Serial.print("init(): success\n");
    } else {
        Serial.print("init(): failed\n");
    }
    sht.setAccuracy(SHTSensor::SHT_ACCURACY_MEDIUM); // only supported by SHT3x


    //----------------TEMP PROBES--------------------//
    // Start up the library
    sensors.begin();

    // Grab a count of devices on the wire
    numberOfDevices = sensors.getDeviceCount();

    // method 1: by index
    if (!sensors.getAddress(controlPanelThermometer, 0)) Serial.println("Unable to find address for Device 0");
    if (!sensors.getAddress(testPanelThermometer, 1)) Serial.println("Unable to find address for Device 1");

    // show the addresses we found on the bus
    Serial.print("Device 0 Address: ");
    printAddress(controlPanelThermometer);
    Serial.println();

    Serial.print("Device 1 Address: ");
    printAddress(testPanelThermometer);
    Serial.println();

    // set the resolution to 9 bit per device
    sensors.setResolution(controlPanelThermometer, TEMPERATURE_PRECISION);
    sensors.setResolution(testPanelThermometer, TEMPERATURE_PRECISION);

    Serial.print("Device 0 Resolution: ");
    Serial.print(sensors.getResolution(controlPanelThermometer), DEC);
    Serial.println();

    Serial.print("Device 1 Resolution: ");
    Serial.print(sensors.getResolution(testPanelThermometer), DEC);
    Serial.println();

    // locate devices on the bus
    Serial.print("Locating devices...");
    Serial.print("Found ");
    Serial.print(numberOfDevices, DEC);
    Serial.println(" devices.");


    ////..........SD Card............//

    setupSDCard();
  
    // If the data.txt file doesn't exist
    // Create a file on the SD card and write the data labels
    File file = SD.open("/data.txt");
    if(!file) {
      Serial.println("File doesn't exist");
      Serial.println("Creating file...");
      writeFile(SD, "/data.txt", "Epoch Time, User ID, Device ID, controlPanelTemperature_*C, testPanelTemperature_*C, shtTemperature_*C, shtHumidity_%, panelCurrentTest_mA, chargeControlCurrentTest_A, panelCurrentControl_mA, chargeControlCurrentControl_A, inachargeControlCurrentControl_mA, inachargeControlCurrentTest_mA, inapanelVoltageControl_V, panelVoltageControl_V, inapanelVoltageTest_V, panelVoltageTest_V, inachargeControlVoltageControl_V,chargeControlVoltageControl_V, inachargeControlVoltageTest_V,chargeControlVoltageTest_V, massConcentrationPm1p0_µg/m^3, massConcentrationPm2p5_µg/m^3, massConcentrationPm4p0_µg/m^3, massConcentrationPm10p0_µg/m^3, ambientHumidity_%, ambientTemperature_*C, windDirection_Degrees, windSpeedD_m/s, rainAmount_mm, panelPowerControl_mW, chargeControlPowerControl_W, panelPowerTest_mW, chargeControlPowerTest_W, inachargeControlPowerControl_mW, inachargeControlPowerTest_mW, irradiance_W/m2, relayTickCounter, timeSend, dateSend, vocIndex, noxIndex \r\n");
    }
    else {
      Serial.println("File already exists");  
    }
    file.close();


    // If the localdata.txt file doesn't exist
    // Create a file on the SD card and write the data labels
    File fileLocalData = SD.open("/localdata.txt");
    if(!fileLocalData) {
      Serial.println("File doesn't exist");
      Serial.println("Creating file...");
      // writeFile(SD, "/data.txt", "Epoch Time, Device_id, Temperature, Humidity, Panel1Current, Panel1Voltage, Panel1Power, Panel2Current, Panel2Voltage, Panel2Power, Panel3Current, Panel3Voltage, Panel3Power, Panel4Current, Panel4Voltage, Panel4Power, PM_1, PM_2_5, PM_4, PM_10, VOC, NOx \r\n");
    }
    else {
      Serial.println("File already exists");  
    }
    fileLocalData.close();


    ////..........RTC Module............//

    if (! rtc.begin()) {
      Serial.println("Couldn't find RTC");
      Serial.flush();
      // while (1) delay(10);
    }

    if (rtc.lostPower()) {
      Serial.println("RTC lost power, let's set the time!");
      // When time needs to be set on a new device, or after a power loss, the
      // following line sets the RTC to the date & time this sketch was compiled
//      rtc.adjust(DateTime(F(DATE), F(TIME)));
      // This line sets the RTC with an explicit date & time, for example to set
      // January 21, 2014 at 3am you would call:
       rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
    }



  ///..........GSM Connection..........//
  
  // Set modem reset, enable, power pins
  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);

  // Set GSM module baud rate and UART pins
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  // Restart SIM800 module, it takes quite some time
  // To skip it, call init() instead of restart()
  Serial.println("Initializing modem...");
  // modem.init();
  GSMConnectionStatus = modem.restart();
  // use modem.init() if you don't need the complete restart

  delay(10000);

  // Unlock your SIM card with a PIN if needed
  if (strlen(simPIN) && modem.getSimStatus() != 3 ) {
    modem.simUnlock(simPIN);
  }


  // Turn off network status lights to reduce current consumption
  turnOffNetlight();

  ///..........Control LED Indicators..........//
  onBlue();
  onGreen();


  ///..........Transmit Local Data To Server..........//
  checkAndSendLocalDataToServer();

  ///...............Deep Sleep............//
  //    esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
  //    Serial.println("Setup ESP32 to sleep for every " + String(TIME_TO_SLEEP) + " Seconds");

  // Wait for weather station to stabilize
  for(int i = 0; i<60; i++){
      ///..........Weather Station..........//  
    readWeatherStationData();
    delay(1000);
  }
}



//int ccount = 0;

void loop() {

  ///..........Control LED Indicators..........//
  onBlue();
  onGreen();

  ///..........Reconnect Wi-Fi..........//
  // reconnectWiFi();

  ///..........Transmit Local Data To Server..........//
  if(millis() - previousLocalDataRuntime >= 600000){
    checkAndSendLocalDataToServer();
    previousLocalDataRuntime = millis();
  }

  ///..........INA226............//
  readINA226SensorData();

  /// ...... Modbus...........///
  readModbusAndCompute();

  ///..........PM Sensor............//
  readPMSensorData();

  ///..........SHT35..........//
  readSHT35Sensor();

  ///..........DS18B20..........//
  readTemperatureProbes();


  ///...........RTC.............//
  // setTimezone("GMT0");
  getTimeAndDate();

  // Reset rainfall amount and relay tick counter at midnight/new day
  if(timeHourInt == 0 && timeMinInt < 3){
    ws1.resetRain();
    relayTickCounter = 0;
  }

  ///..........Weather Station..........//  
  readWeatherStationData();

  ///..........Prepare URL for POST Request..........//
  String requestData = "user_id=" + userID + "&device_id="+ deviceID + "&massOfDust=" + String(massOfDustOnPanel) + "&tempOfPanelControl=" + String(controlPanelTemperature)+ "&tempOfPanelTest=" + String(testPanelTemperature) + "&ambientTemp=" + String(shtTemperature) + "&humidity=" + String(shtHumidity) + 
                    "&panelCurrentControl=" + String(panelCurrentControl) + "&panelCurrentTest=" + String(panelCurrentTest) + "&chargeControlCurrentControl=" + 
                    String(chargeControlCurrentControl) + "&chargeControlCurrentTest=" + String(chargeControlCurrentTest) + "&panelVoltageControl=" + String(panelVoltageControl) + "&panelVoltageTest=" + 
                    String(panelVoltageTest) + "&chargeControlVoltageControl=" + String(chargeControlVoltageControl) + "&chargeControlVoltageTest=" + String(chargeControlVoltageTest) + "&massConcentrationPm1p0=" + String(massConcentrationPm1p0) + 
                    "&massConcentrationPm2p5=" + String(massConcentrationPm2p5) + "&massConcentrationPm4p0=" + String(massConcentrationPm4p0) + "&massConcentrationPm10p0=" + String(massConcentrationPm10p0) + "&ambientHumidityPM=" + String(ambientHumidity) + "&ambientTemperaturePM=" + String(ambientTemperature)+ "&windDirection=" + String(windDirection) + "&windSpeed=" + String(windSpeedD) + "&amountOfRainfall=" + String(rainAmount) + 
                    "&panelPowerControl=" + String(panelPowerControl) + "&panelPowerTest=" + String(panelPowerTest) + "&chargeControlPowerControl=" + String(chargeControlPowerControl) + "&chargeControlPowerTest=" + String(chargeControlPowerTest) + "&irradiance=" + String(irradiance) + "&vocIndex=" + String(vocIndex) + "&noxIndex=" + String(noxIndex) + "&deviceLocalTime=" + timeSend + "&deviceLocalDate=" + dateSend + "&relayTickCounter=" + String(relayTickCounter) + 
                    "&batteryChargePercentTest=" + String(batteryChargePercentTest) + "&batteryChargePercentControl=" + String(batteryChargePercentControl)+ 
                    "&calcIndexControl=" + String(calcIndexControl) + "&instIndexControl=" + String(instIndexControl) + "&efficiencyControl=" + String(efficiencyControl)+ 
                    "&calcIndexTest=" + String(calcIndexTest) + "&instIndexTest=" + String(instIndexTest) + "&efficiencyTest=" + String(efficiencyTest)+ "";

  Serial.println("Data being posted:");
  Serial.println(requestData);         


  if (previousRuntime == 0 || millis() - previousRuntime > 180000)
  {
    if (GSMConnectionStatus)
    {
      Serial.println(requestData);
      //Check if upload was successful else store data locally
      if(!sendHTTPRequestViaGSM(requestData)){
        requestData = requestData + "|";
        appendFile(SD,"/localdata.txt",requestData.c_str());
      }
    }else
    {
      requestData = requestData + "|";
      appendFile(SD,"/localdata.txt",requestData.c_str());
    }


    ///...........Save to SD Card.............//
    //Concatenate all info separated by commas
    dataMessage = String(epochTime) + "," + String(userID) + "," + String(deviceID) + "," + String(controlPanelTemperature) + "," + String(testPanelTemperature) + "," + String(shtTemperature) + "," + String(shtHumidity) +
                "," + String(panelCurrentControl) + "," + String(chargeControlCurrentControl) + "," + String(panelCurrentTest) +  "," + String(chargeControlCurrentTest) + "," + String(inachargeControlCurrentControl) + "," + String(inachargeControlCurrentTest) + "," + String(inapanelVoltageControl) + 
                "," + String(panelVoltageControl) +  "," + String(inapanelVoltageTest) + "," + String(panelVoltageTest) + ","+ String(inachargeControlVoltageControl) + "," + String(chargeControlVoltageControl) + "," + String(inachargeControlVoltageTest) + "," + String(chargeControlVoltageTest) + ","+ String(massConcentrationPm1p0) + 
                "," + String(massConcentrationPm2p5) + "," + String(massConcentrationPm4p0) + "," + String(massConcentrationPm10p0) + "," + String(ambientHumidity) + "," + String(ambientTemperature) + "," + String(windDirection) + "," + String(windSpeedD) + "," + String(rainAmount) + 
                "," + String(panelPowerControl) + "," + String(chargeControlPowerControl) + ","+ String(panelPowerTest) + "," + String(chargeControlPowerTest) + ","+ String(inachargeControlPowerControl) + "," + String(inachargeControlPowerTest) + "," + String(irradiance) + "," + String(relayTickCounter) + "," + String(timeSend) + "," + String(dateSend) + "," + String(vocIndex) + "," + String(noxIndex) + "\r\n";
    Serial.print("Saving data: ");
    Serial.println(dataMessage);

    //Append the data to file
    appendFile(SD, "/data.txt", dataMessage.c_str());

    ///..........Transmit Local Data To Server..........//
    checkAndSendLocalDataToServer();


    previousRuntime = millis();
  }

  // Update relay state
  updateRelayState();

  ///...........Control Relays.............//
  // loadControl();

  //dischargeLoads(chargeControlVoltageTest, chargeControlVoltageControl);
  dischargeLoads(batteryChargePercentTest,batteryChargePercentControl);


  // count relay tick
  countRelayTick();
}


void onGreen() {
  if (GSMConnectionStatus)
  {
    digitalWrite(GREENLED, HIGH);
  } else {
    digitalWrite(GREENLED, LOW);
  }
}

void onBlue() {
  if (!GSMConnectionStatus)
  {
    digitalWrite(BLUELED, HIGH);
  } else {
    digitalWrite(BLUELED, LOW);
  }
}

bool sendHTTPRequestViaGSM(String httpRequestData){
  Serial.print("Connecting to APN: ");
  Serial.print(apn);
  if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
    Serial.println(" fail");
  }
  else {
    Serial.println(" OK");
    
    Serial.print("Connecting to ");
    Serial.print(server);
    if (!client.connect(server, port)) {
      Serial.println(" fail");
      return false;
    }
    else {
      Serial.println(" OK");
    
      // Making an HTTP POST request
      Serial.println("Performing HTTP POST request...");
      client.print(String("POST ") + resource + " HTTP/1.1\r\n");
      client.print(String("Host: ") + server + "\r\n");
      client.println("Connection: close");
      client.println("Content-Type: application/x-www-form-urlencoded");
      client.print("Content-Length: ");
      client.println(httpRequestData.length());
      client.println();
      client.println(httpRequestData);

      unsigned long timeout = millis();
      while (client.connected() && millis() - timeout < 10000L) {
        // Print available data (HTTP response from server)
        while (client.available()) {
          char c = client.read();
          Serial.print(c);
          timeout = millis();
        }
      }
      Serial.println();
      return true;
    }
  }
}

void updateRelayState(){
  // set current state to the previous state before relay control.
  controlPrevRelayState = controlRelayState;
  testPrevRelayState = testRelayState;
}

void countRelayTick(){
  // count relay tick if previous state is different from current
  if(controlPrevRelayState != controlRelayState){
    relayTickCounter++;
  }
  if(testPrevRelayState != testRelayState){
    relayTickCounter++;
  }
}

bool sendLocalData(String &localDataToSend){

  int lengthOfData = localDataToSend.length();

  int numberOfDataRows = (lengthOfData/70)+2;
  // Serial.println("Length of Data");
  // Serial.println(numberOfDataRows);
  String dataToSend = "";
  // Serial.println(numberOfDataRows);
  // Serial.println(localDataToSend);

  // count number of | in local data
  int StringCount = count(localDataToSend, '|');

    // Split the string into substrings

  int dataCounter = 0;

  // while there is still data available for transmission
  while (localDataToSend.length() > 0)
  {
    dataCounter = dataCounter+1;
    int index = localDataToSend.indexOf('|');
    if (index == -1) // No | found
    {
      // if there is no | at the end of data (last data to be transmitted) then assign the full string to be transmitted
      dataToSend = localDataToSend;
      break;
    }
    else
    {
      // split string up to the first | for transmission 
      dataToSend = localDataToSend.substring(0, index);
      // start new data string from the first | to the end of the string
      localDataToSend = localDataToSend.substring(index+1);
    }
    // Serial.println("Lengtta");
    Serial.print("Sending local data.................(");
    Serial.print(dataCounter);
    Serial.print("/");
    Serial.print(StringCount);
    Serial.println(")");
    // Serial.println(dataToSend);
    if(!sendHTTPRequestViaGSM(dataToSend)){
      // Return false if tranmission fails and regenerate the last transmit data string state
      localDataToSend = localDataToSend + dataToSend + "|";
      // Serial.println(localDataToSend);
      return false;
    }

  }

  // for (int i = 0; i < StringCount; i++)
  // {
    
  //   // Serial.println(dataRow);
  // }
  return true;
}

int count(String s, char c)
{
  // Count variable
  int res = 0;

  for (int i=0;i<s.length();i++)

    // checking character in string
    if (s[i] == c)
      res++;

  return res;
}

void readTemperatureProbes(){

  float temptemp = 0.0;
  Serial.println();
  Serial.println("------DS18B20------");

  Serial.print("Requesting temperatures...");
  sensors.requestTemperatures();
  Serial.println("DONE");

  // print the device information
  temptemp = getTemperature(controlPanelThermometer);
  if(temptemp > 1.0){
    controlPanelTemperature = temptemp;
  }

  temptemp = getTemperature(testPanelThermometer);
  if(temptemp > 1.0){
    testPanelTemperature = temptemp;
  }
}

// function to print a device address
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    // zero pad the address if necessary
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}

// function to print and return the temperature for a panel
float getTemperature(DeviceAddress deviceAddress)
{
  float tempC = sensors.getTempC(deviceAddress);
  if(tempC == DEVICE_DISCONNECTED_C) 
  {
    Serial.println("Error: Could not read temperature data");
    return 0;
  }
  Serial.print("Temp C: ");
  Serial.print(tempC);
  Serial.print(" Temp F: ");
  Serial.print(DallasTemperature::toFahrenheit(tempC));
  return tempC;
}

void getTimeAndDate(){
  Serial.println("------TIME------");

  DateTime now = rtc.now();
  unsigned long epochTime = now.unixtime();

  dateYear = String(now.year());
  dateMonth = String(now.month());
  dateDay = String(now.day());
  timeHour = String(now.hour());
  timeHourInt = now.hour();
  timeMinute = String(now.minute());
  timeSecond = String(now.second());

  dateSend = dateYear + "-" + dateMonth + "-" + dateDay;
  timeSend = timeHour + ":" + timeMinute + ":" + timeSecond;

  Serial.print(dateSend);
  Serial.print("  ");
  Serial.println(timeSend);

}

void loadControl(){
  if (timeHourInt >= 20 || timeHourInt < 5)
  {
    digitalWrite(controlPanelRelayPin, HIGH);
    digitalWrite(testPanelRelayPin, HIGH);
    Serial.println("Relays Off >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
  }else{
    digitalWrite(controlPanelRelayPin, LOW);
    digitalWrite(testPanelRelayPin, LOW);
    Serial.println("Relays On <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
  }
  
}

void controlLoadRelayStatus(String on_off_status){
  if(on_off_status == "OFF"){
    digitalWrite(controlPanelRelayPin, LOW);
    controlRelayState = OFF;
  }
  if(on_off_status == "ON"){
    digitalWrite(controlPanelRelayPin, HIGH);
    controlRelayState = ON;
  }
}

void testLoadRelayStatus(String on_off_status){
  if(on_off_status == "OFF"){
    digitalWrite(testPanelRelayPin, LOW);
    testRelayState = OFF;
  }
  if(on_off_status == "ON"){
    digitalWrite(testPanelRelayPin, HIGH);
    testRelayState = ON;
  }
}

void printModuleVersions() {
    uint16_t error;
    char errorMessage[256];

    unsigned char productName[32];
    uint8_t productNameSize = 32;

    error = sen5x.getProductName(productName, productNameSize);

    if (error) {
        Serial.print("Error trying to execute getProductName(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    } else {
        Serial.print("ProductName:");
        Serial.println((char*)productName);
    }

    uint8_t firmwareMajor;
    uint8_t firmwareMinor;
    bool firmwareDebug;
    uint8_t hardwareMajor;
    uint8_t hardwareMinor;
    uint8_t protocolMajor;
    uint8_t protocolMinor;

    error = sen5x.getVersion(firmwareMajor, firmwareMinor, firmwareDebug,
                             hardwareMajor, hardwareMinor, protocolMajor,
                             protocolMinor);
    if (error) {
        Serial.print("Error trying to execute getVersion(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    } else {
      Serial.print("Firmware: ");
      Serial.print(firmwareMajor);
      Serial.print(".");
      Serial.print(firmwareMinor);
      Serial.print(", ");

      Serial.print("Hardware: ");
      Serial.print(hardwareMajor);
      Serial.print(".");
      Serial.println(hardwareMinor);
    }
}

void printSerialNumber() {
    uint16_t error;
    char errorMessage[256];
    unsigned char serialNumber[32];
    uint8_t serialNumberSize = 32;

    error = sen5x.getSerialNumber(serialNumber, serialNumberSize);
    if (error) {
        Serial.print("Error trying to execute getSerialNumber(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    } else {
        Serial.print("SerialNumber:");
        Serial.println((char*)serialNumber);
    }
}

void checkAndSendLocalDataToServer(){
  ///..........Setup Local Data Storage..........//
   /*  if(!SPIFFS.begin()){
        Serial.println("Card Mount Failed");
        return;
    } */

    localData = readFile(SD, "/localdata.txt");
    
    //check if there is data available for transmission
    if(localData.length()>10){
      localDataAvailable = true;
      Serial.println("Local data available for transmission.");
      
      //If data is available check for wifi connection
      if (GSMConnectionStatus)
      {

        // if GSM is connected send data to server
        if(sendLocalData(localData)){
          // if sending is successful, clear local data
          localData = "";
          writeFile(SD,"/localdata.txt",localData.c_str());
          localDataAvailable = false;
          Serial.println("Local Data Transmitted Successfully.");
        }else
        {
          // if sending is unsuccessful update local data
          writeFile(SD,"/localdata.txt",localData.c_str());
          Serial.print("Local Data Transmission Failed.");
        }
        
      }else
      {
        Serial.println("No Wi-Fi Connection -- Local Data Could not be Transmitted.");
      }
      
      // sendLocalData(localData);
      
    }else
    {
      localDataAvailable = false;
      Serial.println("No local data available for transmission.");

    }
}

void readPMSensorData(){
    Serial.print("PM Sensor\n");
    uint16_t error;
    char errorMessage[256];

    delay(1000);

    error = sen5x.readMeasuredValues(
        massConcentrationPm1p0, massConcentrationPm2p5, massConcentrationPm4p0,
        massConcentrationPm10p0, ambientHumidity, ambientTemperature, vocIndex,
        noxIndex);

    if (error) {
        Serial.print("Error trying to execute readMeasuredValues(): ");
        errorToString(error, errorMessage, 256);
        Serial.println(errorMessage);
    } else {
        Serial.print("MassConcentrationPm1p0:");
        Serial.print(massConcentrationPm1p0);
        Serial.print("\t");
        Serial.print("MassConcentrationPm2p5:");
        Serial.print(massConcentrationPm2p5);
        Serial.print("\t");
        Serial.print("MassConcentrationPm4p0:");
        Serial.print(massConcentrationPm4p0);
        Serial.print("\t");
        Serial.print("MassConcentrationPm10p0:");
        Serial.print(massConcentrationPm10p0);
        Serial.print("\t");
        Serial.print("AmbientHumidity:");
        if (isnan(ambientHumidity)) {
            Serial.print("n/a");
        } else {
            Serial.print(ambientHumidity);
        }
        Serial.print("\t");
        Serial.print("AmbientTemperature:");
        if (isnan(ambientTemperature)) {
            Serial.print("n/a");
        } else {
            Serial.print(ambientTemperature);
        }
        Serial.print("\t");
        Serial.print("VocIndex:");
        if (isnan(vocIndex)) {
            Serial.print("n/a");
        } else {
            Serial.print(vocIndex);
        }
        Serial.print("\t");
        Serial.print("NoxIndex:");
        if (isnan(noxIndex)) {
            Serial.println("n/a");
        } else {
            Serial.println(noxIndex);
        }
    }
}

void readINA226SensorData(){
  Serial.print("INA226\n");

  Serial.println("\n#\tBUS\tSHUNT\tCURRENT\tPOWER");

  panelCurrentControl = controlPanel.getCurrent_mA();
  panelCurrentTest = testPanel.getCurrent_mA();
  inachargeControlCurrentControl = controlChargeController.getCurrent_mA();
  inachargeControlCurrentTest = testChargeController.getCurrent_mA();
  inapanelVoltageControl = controlPanel.getBusVoltage();
  inapanelVoltageTest = testPanel.getBusVoltage();
  inachargeControlVoltageControl = controlChargeController.getBusVoltage();
  inachargeControlVoltageTest = testChargeController.getBusVoltage();
  panelPowerControl = controlPanel.getPower_mW();
  panelPowerTest = testPanel.getPower_mW();
  inachargeControlPowerControl = controlChargeController.getPower_mW();
  inachargeControlPowerTest = testChargeController.getPower_mW();



    Serial.print("CP");
    Serial.print("\t");
    Serial.print(inapanelVoltageControl, 3);
    Serial.print("\t");
    Serial.print(controlPanel.getShuntVoltage_mV(), 3);
    Serial.print("\t");
    Serial.print(panelCurrentControl, 3);
    Serial.print("\t");
    Serial.print(panelPowerControl, 3);
    Serial.println();
    
    Serial.print("CC");
    Serial.print("\t");
    Serial.print(inachargeControlVoltageControl, 3);
    Serial.print("\t");
    Serial.print(controlChargeController.getShuntVoltage_mV(), 3);
    Serial.print("\t");
    Serial.print(inachargeControlCurrentControl, 3);
    Serial.print("\t");
    Serial.print(inachargeControlPowerControl, 3);
    Serial.println();

    Serial.print("TP");
    Serial.print("\t");
    Serial.print(inapanelVoltageTest, 3);
    Serial.print("\t");
    Serial.print(testPanel.getShuntVoltage_mV(), 3);
    Serial.print("\t");
    Serial.print(panelCurrentTest, 3);
    Serial.print("\t");
    Serial.print(panelPowerTest, 3);
    Serial.println();

    Serial.print("TC");
    Serial.print("\t");
    Serial.print(inachargeControlVoltageTest , 3);
    Serial.print("\t");
    Serial.print(testChargeController.getShuntVoltage_mV(), 3);
    Serial.print("\t");
    Serial.print(inachargeControlCurrentTest, 3);
    Serial.print("\t");
    Serial.print(inachargeControlPowerTest, 3);
    Serial.println();


  efficiencyControl = (inachargeControlPowerControl/panelPowerControl)*100;
  efficiencyTest = (inachargeControlPowerTest/panelPowerTest)*100;

  Serial.println(efficiencyControl);
  Serial.println(efficiencyTest);
}



void readModbusAndCompute() {
  uint8_t result;

  // ================== Test Setup (Slave 1) ==================
  RS485.end(); // Stop Serial communication
  RS485.begin(9600, SERIAL_8N1, RS485_RX_SLAVE_1, RS485_TX_SLAVE_1); // Initialize pins for Slave 1
  node.begin(1, RS485); // Set Slave ID to 1
  delay(20);

  // Read Panel Voltage
  result = node.readHoldingRegisters(PANEL_VOLTAGE, 1);
  panelVoltageTest = ((result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0);

  // Read Charging Current
  result = node.readHoldingRegisters(CHARGING_CURRENT, 1);
  chargeControlCurrentTest = 1000*((result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 100.0 : 0.0);

  // Read Battery Voltage
  result = node.readHoldingRegisters(BATTERY_VOLTAGE, 1);
  chargeControlVoltageTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0;

  // Read Battery Charge Percent
  result = node.readHoldingRegisters(BATTERY_CHARGE_PERCENT, 1);
  batteryChargePercentTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

  // Read Battery Power
  result = node.readHoldingRegisters(BATTERY_POWER, 1);
  batteryPowerTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

  // Read Load Voltage
  result = node.readHoldingRegisters(LOAD_VOLTAGE, 1);
  loadVoltageTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0;

  // Read Load Current
  result = node.readHoldingRegisters(LOAD_CURRENT, 1);
  loadCurrentTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 100.0 : 0.0;

  // Read Load Power
  result = node.readHoldingRegisters(LOAD_POWER, 1);
  loadPowerTest = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

    // Compute Power (Post MPPT)
  chargeControlPowerTest = (chargeControlVoltageTest * chargeControlCurrentTest);
  calcIndexTest = (chargeControlPowerTest/(batteryPowerTest*1000));
  instIndexTest = (chargeControlPowerTest/inachargeControlPowerTest);

  // ================== Control Setup (Slave 2) ==================
  RS485.end(); // Stop Serial communication
  RS485.begin(9600, SERIAL_8N1, RS485_RX_SLAVE_2, RS485_TX_SLAVE_2); // Initialize pins for Slave 2
  node.begin(2, RS485); // Set Slave ID to 2
  delay(20);

  // Read Panel Voltage
  result = node.readHoldingRegisters(PANEL_VOLTAGE, 1);
  panelVoltageControl = ((result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0);

  // Read Charging Current
  result = node.readHoldingRegisters(CHARGING_CURRENT, 1);
  chargeControlCurrentControl = 1000*((result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 100.0 : 0.0);

  // Read Battery Voltage
  result = node.readHoldingRegisters(BATTERY_VOLTAGE, 1);
  chargeControlVoltageControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0;

  // Read Battery Charge Percent
  result = node.readHoldingRegisters(BATTERY_CHARGE_PERCENT, 1);
  batteryChargePercentControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

  // Read Battery Power
  result = node.readHoldingRegisters(BATTERY_POWER, 1);
  batteryPowerControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

  // Read Load Voltage
  result = node.readHoldingRegisters(LOAD_VOLTAGE, 1);
  loadVoltageControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 10.0 : 0.0;

  // Read Load Current
  result = node.readHoldingRegisters(LOAD_CURRENT, 1);
  loadCurrentControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) / 100.0 : 0.0;

  // Read Load Power
  result = node.readHoldingRegisters(LOAD_POWER, 1);
  loadPowerControl = (result == node.ku8MBSuccess) ? node.getResponseBuffer(0) : 0.0;

    // Compute Power (Post MPPT)
  chargeControlPowerControl = (chargeControlVoltageControl * chargeControlCurrentControl);
  calcIndexControl = (chargeControlPowerControl/(batteryPowerControl*1000));
  instIndexControl = (chargeControlPowerControl/inachargeControlPowerControl);

  // ================== Print Results ==================
  Serial.println("\n===========================");
  Serial.println("Test Setup Data:");
  Serial.print("Panel Voltage (Test): "); Serial.print(panelVoltageTest, 2); Serial.println(" V");
  Serial.print("Charging Current (Test): "); Serial.print(chargeControlCurrentTest, 2); Serial.println(" mA");
  Serial.print("Computed Charging Power (Test): "); Serial.print(chargeControlPowerTest, 2); Serial.println(" mW");
  Serial.print("Battery Voltage (Test): "); Serial.print(chargeControlVoltageTest, 2); Serial.println(" V");
  Serial.print("Battery Charge Percent (Test): "); Serial.print(batteryChargePercentTest, 2); Serial.println(" %");
  Serial.print("Battery Power (Test): "); Serial.print(batteryPowerTest, 2); Serial.println(" W");
  Serial.print("Load Voltage (Test): "); Serial.print(loadVoltageTest, 2); Serial.println(" V");
  Serial.print("Load Current (Test): "); Serial.print(loadCurrentTest, 2); Serial.println(" A");
  Serial.print("Load Power (Test): "); Serial.print(loadPowerTest, 2); Serial.println(" W");
  Serial.print("Calculation Index (Test): "); Serial.print(calcIndexTest, 2); Serial.println("Units");
  Serial.print("Instrument Index (Test): "); Serial.print(instIndexTest, 2); Serial.println("Units");

  Serial.println("\nControl Setup Data:");
  Serial.print("Panel Voltage (Control): "); Serial.print(panelVoltageControl, 2); Serial.println(" V");
  Serial.print("Charging Current (Control): "); Serial.print(chargeControlCurrentControl, 2); Serial.println(" mA");
  Serial.print("Computed Charging Power (Control): "); Serial.print(chargeControlPowerControl, 2); Serial.println(" mW");
  Serial.print("Battery Voltage (Control): "); Serial.print(chargeControlVoltageControl, 2); Serial.println(" V");
  Serial.print("Battery Charge Percent (Control): "); Serial.print(batteryChargePercentControl, 2); Serial.println(" %");
  Serial.print("Battery Power (Control): "); Serial.print(batteryPowerControl, 2); Serial.println(" W");
  Serial.print("Load Voltage (Control): "); Serial.print(loadVoltageControl, 2); Serial.println(" V");
  Serial.print("Load Current (Control): "); Serial.print(loadCurrentControl, 2); Serial.println(" A");
  Serial.print("Load Power (Control): "); Serial.print(loadPowerControl, 2); Serial.println(" W");
  Serial.print("Calculation Index (Control): "); Serial.print(calcIndexControl, 2); Serial.println("Units");
  Serial.print("Instrument Index (Control): "); Serial.print(instIndexControl, 2); Serial.println("Units");
  Serial.println("===========================");
}



void readWeatherStationData(){
    Serial.print("Weather Station\n");
    timer = millis();
    float rainFallAmount = 0;
    
    long windSpeed;

    ws1.update(); //Call this every cycle in your main loop to update all the sensor values

    if(timer > nextCalc)
    {

    nextCalc = timer + CALC_INTERVAL;
    rainFallAmount = ws1.getRain();
    windSpeed = ws1.getWindSpeed();
    windDirection = ws1.getWindDirection();
    windGust = ws1.getWindGust();

    //     windSpeed / 10 will give the integer component of the wind speed
    //     windSpeed % 10 will give the fractional component of the wind speed

    Serial.print("Wind speed: ");
    Serial.print(windSpeed / 10);
    Serial.print('.');
    Serial.print(windSpeed % 10);
    Serial.println(" ");

    windSpeedD = (windSpeed / 10) + (0.1 * (windSpeed % 10));

    //Serial.print("Gusting at: ");
    //Serial.print(windGust / 10);
    //Serial.print('.');
    //Serial.print(windGust % 10);
    //Serial.println("");

    Serial.print("Wind Direction: ");
    Serial.print(windDirection);
    Serial.println("");

    Serial.print("Total Rain: ");
    rainFallAmount = rainFallAmount/1000;
    Serial.println((float) rainFallAmount);

    rainAmount = amountOfRainPref + rainFallAmount;

    //Serial.print("Analog Value: ");
    //Serial.println(map(analogRead(VANE_PIN), 0, 4096, 0, 1024));

    Serial.print("rainAmount ");
    Serial.println(rainAmount);

//    sendDataStatus = 1;

  }
}

void readSHT35Sensor(){
  if (sht.readSample()) {

      shtHumidity = sht.getHumidity();
      shtTemperature = sht.getTemperature();
      Serial.print("SHT35\n");
      Serial.print("SHT:\n");
      Serial.print("  RH: ");
      Serial.print(shtHumidity, 2);
      Serial.print("\n");
      Serial.print("  T:  ");
      Serial.print(shtTemperature, 2);
      Serial.print("\n");
  } else {
      Serial.print("Error in readSample()\n");
  }
}

// Initialize SD card
void setupSDCard()
{
  hspi.begin(HSPI_SCLK, HSPI_MISO, HSPI_MOSI, HSPI_SS); //SCLK, MISO, MOSI, SS
  // spi.begin(VSPI_SCLK, VSPI_MISO, VSPI_MOSI, VSPI_SS); //SCLK, MISO, MOSI, SS
  //  pinMode(hspi.pinSS(), OUTPUT); //HSPI SS

  if (!SD.begin(HSPI_SS,hspi)) {
    Serial.println("Card Mount Failed");
    return;
  }

  uint8_t cardType = SD.cardType();

  if(cardType == CARD_NONE){
    Serial.println("No SD card attached");
    return;
  }

  Serial.print("SD Card Type: ");
  if(cardType == CARD_MMC){
    Serial.println("MMC");
  } else if(cardType == CARD_SD){
    Serial.println("SDSC");
  } else if(cardType == CARD_SDHC){
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);
}

// Write to the SD card
void writeFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  if(file.print(message)) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

// Append data to the SD card
void appendFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file) {
    Serial.println("Failed to open file for appending");
    return;
  }
  if(file.print(message)) {
    Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}

String readFile(fs::FS &fs, const char * path){

  String fileData = "";

  Serial.printf("Reading file: %s\n", path);

  File file = fs.open(path);
  if(!file){
      Serial.println("Failed to open file for reading");
      return String();
  }

  // Serial.print("Read from file: ");
  while(file.available()){
      fileData = file.readStringUntil('\n');
      break;
  }
  file.close();

  return fileData;
}

/*

bool sendDataToServer(String var) {
  if (WiFi.status() == WL_CONNECTED) {
    String serverPath = var;
    // Your Domain name with URL path or IP address with path
    String responseText = httpGETRequest(serverPath.c_str());
    Serial.println(responseText.c_str());
    if(strcmp(responseText.c_str(), "Success") == 0){
      return true;
    }else{
      return false;
    }+
  }

}

String httpGETRequest(const char* serverName) {

//  WiFiClient client;

  HTTPClient http;

  // Your Domain name with URL path or IP address with path
  http.begin(client, serverName);

  // Send HTTP POST request
  int httpResponseCode = http.GET();
  String payload = "{}";

  if (httpResponseCode > 0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }

  // Free resources
  http.end();
  return payload;
}

*/


/*void dischargeLoads(float testBatteryLevel, float controlBatteryLevel) {
  static int testBatteryLevelCounter = 0;
  static int controlBatteryLevelCounter = 0;

  const int batteryThreshold = 13.0;


  if(testBatteryLevel >= batteryThreshold){
    testBatteryLevelCounter++;
  }else
  {
    testBatteryLevelCounter = 0;
  }

  if(controlBatteryLevel >= batteryThreshold){
    controlBatteryLevelCounter++;
  }else
  {
    controlBatteryLevelCounter = 0;
  }

  if (testBatteryLevelCounter >= 5)
  {
    testLoadRelayStatus("ON");
  }else{
    testLoadRelayStatus("OFF");
  }

  if (controlBatteryLevelCounter >= 5)
  {
    controlLoadRelayStatus("ON");
  }else{
    controlLoadRelayStatus("OFF");
  } 
}*/

void dischargeLoads(float testBatteryChargePercent, float controlBatteryChargePercent) {
  // Keep track of consecutive readings above threshold
  static int testBatteryChargeCounter = 0;
  static int controlBatteryChargeCounter = 0;

  // 75% threshold for turning on the load
  const float batteryThresholdPercent = 90.0;

  // Check the Test battery charge percent
  if (testBatteryChargePercent >= batteryThresholdPercent) {
    testBatteryChargeCounter++;
  } else {
    testBatteryChargeCounter = 0;
  }

  // Check the Control battery charge percent
  if (controlBatteryChargePercent >= batteryThresholdPercent) {
    controlBatteryChargeCounter++;
  } else {
    controlBatteryChargeCounter = 0;
  }

  // If the Test battery stayed above threshold for at least 3 consecutive reads, turn relay ON
  if (testBatteryChargeCounter >= 3) {
    testLoadRelayStatus("ON");
  } else {
    testLoadRelayStatus("OFF");
  }

  // If the Control battery stayed above threshold for at least 5 consecutive reads, turn relay ON
  if (controlBatteryChargeCounter >= 3) {
    controlLoadRelayStatus("ON");
  } else {
    controlLoadRelayStatus("OFF");
  }
}


void turnOffNetlight()
{
  Serial.println("Turning off SIM800 Red LED...");
  modem.sendAT("+CNETLIGHT=0");
}

void turnOnNetlight()
{
  Serial.println("Turning on SIM800 Red LED...");
  modem.sendAT("+CNETLIGHT=1");
}
